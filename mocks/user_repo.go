// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PhillBeck/ingresse-backend/repo (interfaces: IUser)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/PhillBeck/ingresse-backend/model"
	gomock "github.com/golang/mock/gomock"
	bson "gopkg.in/mgo.v2/bson"
)

// MockIUser is a mock of IUser interface
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
}

// MockIUserMockRecorder is the mock recorder for MockIUser
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method
func (m *MockIUser) DeleteByID(arg0 bson.ObjectId) error {
	ret := m.ctrl.Call(m, "DeleteByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockIUserMockRecorder) DeleteByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIUser)(nil).DeleteByID), arg0)
}

// GetByID mocks base method
func (m *MockIUser) GetByID(arg0 bson.ObjectId) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockIUserMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUser)(nil).GetByID), arg0)
}

// Save mocks base method
func (m *MockIUser) Save(arg0 *model.User) error {
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIUserMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIUser)(nil).Save), arg0)
}
